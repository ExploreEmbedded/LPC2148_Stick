<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\12a-GLCD_Graphics.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\12a-GLCD_Graphics.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Mon Apr 10 10:53:19 2017
<BR><P>
<H3>Maximum Stack Usage =        196 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; GLCD_Printf &rArr; GLCD_DisplayNumber &rArr; GLCD_DisplayChar &rArr; glcd_DataWrite &rArr; GLCD_GoToNextLine &rArr; GLCD_GoToPage &rArr; glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[13]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3]">main</a> from main.o(i.main) referenced from __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[5]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[7]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3c]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3d]"></a>__decompress</STRONG> (ARM, 92 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3e]"></a>__decompress1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3f]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[40]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[41]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[42]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[43]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[44]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[45]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[46]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[47]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[48]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[49]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[4a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[4b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[4c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[4d]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[4e]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[4f]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[50]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[51]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[52]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[53]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[54]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[55]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[56]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[57]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[58]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[59]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[5a]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[5b]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[6]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5c]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[8]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[5d]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[c]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; exit
</UL>
<BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[5e]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[15]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[e]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[5f]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[10]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>

<P><STRONG><a name="[13]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[d]"></a>exit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[65]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[66]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[11]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via Veneer)
</UL>

<P><STRONG><a name="[67]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[16]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DisplayNumber
</UL>

<P><STRONG><a name="[6a]"></a>__semihosting_library_function</STRONG> (ARM, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[1b]"></a>DELAY_ms</STRONG> (ARM, 44 bytes, Stack size 12 bytes, delay.o(i.DELAY_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DELAY_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_us
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c]"></a>DELAY_us</STRONG> (ARM, 52 bytes, Stack size 0 bytes, delay.o(i.DELAY_us))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_DataWrite
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_CmdWrite
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_BusyCheck
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
</UL>

<P><STRONG><a name="[1d]"></a>GLCD_Clear</STRONG> (ARM, 100 bytes, Stack size 16 bytes, glcd.o(i.GLCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GLCD_Clear &rArr; glcd_DataWrite &rArr; GLCD_GoToNextLine &rArr; GLCD_GoToPage &rArr; glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_DataWrite
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_GoToPage
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_GoToLine
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>GLCD_DataRead</STRONG> (ARM, 44 bytes, Stack size 0 bytes, glcd.o(i.GLCD_DataRead))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_GetXYData
</UL>

<P><STRONG><a name="[21]"></a>GLCD_DisplayChar</STRONG> (ARM, 176 bytes, Stack size 16 bytes, glcd.o(i.GLCD_DisplayChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GLCD_DisplayChar &rArr; glcd_DataWrite &rArr; GLCD_GoToNextLine &rArr; GLCD_GoToPage &rArr; glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_DataWrite
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_GoToPage
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_GoToNextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DisplayString
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DisplayNumber
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Printf
</UL>

<P><STRONG><a name="[23]"></a>GLCD_DisplayNumber</STRONG> (ARM, 340 bytes, Stack size 32 bytes, glcd.o(i.GLCD_DisplayNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = GLCD_DisplayNumber &rArr; GLCD_DisplayChar &rArr; glcd_DataWrite &rArr; GLCD_GoToNextLine &rArr; GLCD_GoToPage &rArr; glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Printf
</UL>

<P><STRONG><a name="[24]"></a>GLCD_DisplayString</STRONG> (ARM, 40 bytes, Stack size 8 bytes, glcd.o(i.GLCD_DisplayString))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GLCD_DisplayString &rArr; GLCD_DisplayChar &rArr; glcd_DataWrite &rArr; GLCD_GoToNextLine &rArr; GLCD_GoToPage &rArr; glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Printf
</UL>

<P><STRONG><a name="[25]"></a>GLCD_DrawCircle</STRONG> (ARM, 340 bytes, Stack size 40 bytes, glcd.o(i.GLCD_DrawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = GLCD_DrawCircle &rArr; GLCD_SetDot &rArr; glcd_DataWrite &rArr; GLCD_GoToNextLine &rArr; GLCD_GoToPage &rArr; glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetDot
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawFillCircle
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27]"></a>GLCD_DrawFillCircle</STRONG> (ARM, 84 bytes, Stack size 24 bytes, glcd.o(i.GLCD_DrawFillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = GLCD_DrawFillCircle &rArr; GLCD_DrawCircle &rArr; GLCD_SetDot &rArr; glcd_DataWrite &rArr; GLCD_GoToNextLine &rArr; GLCD_GoToPage &rArr; glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28]"></a>GLCD_DrawFillRect</STRONG> (ARM, 96 bytes, Stack size 32 bytes, glcd.o(i.GLCD_DrawFillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = GLCD_DrawFillRect &rArr; GLCD_DrawHoriLine &rArr; GLCD_SetDot &rArr; glcd_DataWrite &rArr; GLCD_GoToNextLine &rArr; GLCD_GoToPage &rArr; glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHoriLine
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>GLCD_DrawHoriLine</STRONG> (ARM, 136 bytes, Stack size 24 bytes, glcd.o(i.GLCD_DrawHoriLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GLCD_DrawHoriLine &rArr; GLCD_SetDot &rArr; glcd_DataWrite &rArr; GLCD_GoToNextLine &rArr; GLCD_GoToPage &rArr; glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetDot
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawRect
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawLine
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawFillRect
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a]"></a>GLCD_DrawLine</STRONG> (ARM, 504 bytes, Stack size 48 bytes, glcd.o(i.GLCD_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = GLCD_DrawLine &rArr; GLCD_DrawVertLine &rArr; GLCD_SetDot &rArr; glcd_DataWrite &rArr; GLCD_GoToNextLine &rArr; GLCD_GoToPage &rArr; glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetDot
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawVertLine
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHoriLine
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c]"></a>GLCD_DrawRect</STRONG> (ARM, 136 bytes, Stack size 24 bytes, glcd.o(i.GLCD_DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = GLCD_DrawRect &rArr; GLCD_DrawVertLine &rArr; GLCD_SetDot &rArr; glcd_DataWrite &rArr; GLCD_GoToNextLine &rArr; GLCD_GoToPage &rArr; glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawVertLine
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHoriLine
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b]"></a>GLCD_DrawVertLine</STRONG> (ARM, 112 bytes, Stack size 24 bytes, glcd.o(i.GLCD_DrawVertLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GLCD_DrawVertLine &rArr; GLCD_SetDot &rArr; glcd_DataWrite &rArr; GLCD_GoToNextLine &rArr; GLCD_GoToPage &rArr; glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetDot
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawRect
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawLine
</UL>

<P><STRONG><a name="[2d]"></a>GLCD_GetXYData</STRONG> (ARM, 152 bytes, Stack size 16 bytes, glcd.o(i.GLCD_GetXYData))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GLCD_GetXYData &rArr; GLCD_SetCursor &rArr; glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetCursor
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DataRead
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_SelectPage1
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_SelectPage0
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetDot
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_InvertRect
</UL>

<P><STRONG><a name="[1e]"></a>GLCD_GoToLine</STRONG> (ARM, 44 bytes, Stack size 8 bytes, glcd.o(i.GLCD_GoToLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GLCD_GoToLine &rArr; GLCD_GoToPage &rArr; glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_GoToPage
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22]"></a>GLCD_GoToNextLine</STRONG> (ARM, 64 bytes, Stack size 8 bytes, glcd.o(i.GLCD_GoToNextLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GLCD_GoToNextLine &rArr; GLCD_GoToPage &rArr; glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_GoToPage
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_DataWrite
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DisplayChar
</UL>

<P><STRONG><a name="[1f]"></a>GLCD_GoToPage</STRONG> (ARM, 92 bytes, Stack size 8 bytes, glcd.o(i.GLCD_GoToPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GLCD_GoToPage &rArr; glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_CmdWrite
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_SelectPage1
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_SelectPage0
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_GoToNextLine
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DisplayChar
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_GoToLine
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
</UL>

<P><STRONG><a name="[33]"></a>GLCD_Init</STRONG> (ARM, 108 bytes, Stack size 8 bytes, glcd.o(i.GLCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GLCD_Init &rArr; GLCD_Clear &rArr; glcd_DataWrite &rArr; GLCD_GoToNextLine &rArr; GLCD_GoToPage &rArr; glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_CmdWrite
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_GoToPage
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_SelectPage1
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_SelectPage0
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34]"></a>GLCD_InvertRect</STRONG> (ARM, 168 bytes, Stack size 40 bytes, glcd.o(i.GLCD_InvertRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = GLCD_InvertRect &rArr; glcd_DataWrite &rArr; GLCD_GoToNextLine &rArr; GLCD_GoToPage &rArr; glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_DataWrite
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_GetXYData
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>GLCD_Printf</STRONG> (ARM, 856 bytes, Stack size 56 bytes, glcd.o(i.GLCD_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = GLCD_Printf &rArr; GLCD_DisplayNumber &rArr; GLCD_DisplayChar &rArr; glcd_DataWrite &rArr; GLCD_GoToNextLine &rArr; GLCD_GoToPage &rArr; glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DisplayString
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DisplayNumber
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>GLCD_SetCursor</STRONG> (ARM, 124 bytes, Stack size 16 bytes, glcd.o(i.GLCD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GLCD_SetCursor &rArr; glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_CmdWrite
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_SelectPage1
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_SelectPage0
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_GetXYData
</UL>

<P><STRONG><a name="[26]"></a>GLCD_SetDot</STRONG> (ARM, 128 bytes, Stack size 24 bytes, glcd.o(i.GLCD_SetDot))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GLCD_SetDot &rArr; glcd_DataWrite &rArr; GLCD_GoToNextLine &rArr; GLCD_GoToPage &rArr; glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_DataWrite
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_GetXYData
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawVertLine
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawLine
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHoriLine
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawCircle
</UL>

<P><STRONG><a name="[36]"></a>GLCD_SetUp</STRONG> (ARM, 272 bytes, Stack size 40 bytes, glcd.o(i.GLCD_SetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GLCD_SetUp &rArr; GPIO_PinDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>GPIO_PinDirection</STRONG> (ARM, 188 bytes, Stack size 4 bytes, gpio.o(i.GPIO_PinDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPIO_PinDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetUp
</UL>

<P><STRONG><a name="[3a]"></a>GPIO_PinWrite</STRONG> (ARM, 188 bytes, Stack size 4 bytes, gpio.o(i.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_DataWrite
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_CmdWrite
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_SendData
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_SelectPage1
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_SelectPage0
</UL>

<P><STRONG><a name="[3b]"></a>SystemInit</STRONG> (ARM, 100 bytes, Stack size 0 bytes, systeminit.o(i.SystemInit))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>glcd_BusyCheck</STRONG> (ARM, 20 bytes, Stack size 8 bytes, glcd.o(i.glcd_BusyCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = glcd_BusyCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_us
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_DataWrite
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_CmdWrite
</UL>

<P><STRONG><a name="[32]"></a>glcd_CmdWrite</STRONG> (ARM, 108 bytes, Stack size 8 bytes, glcd.o(i.glcd_CmdWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_us
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_BusyCheck
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetCursor
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_GoToPage
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
</UL>

<P><STRONG><a name="[20]"></a>glcd_DataWrite</STRONG> (ARM, 208 bytes, Stack size 16 bytes, glcd.o(i.glcd_DataWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = glcd_DataWrite &rArr; GLCD_GoToNextLine &rArr; GLCD_GoToPage &rArr; glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_us
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_BusyCheck
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_GoToNextLine
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetDot
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DisplayChar
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_InvertRect
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
</UL>

<P><STRONG><a name="[3]"></a>main</STRONG> (ARM, 712 bytes, Stack size 40 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = main &rArr; GLCD_Printf &rArr; GLCD_DisplayNumber &rArr; GLCD_DisplayChar &rArr; glcd_DataWrite &rArr; GLCD_GoToNextLine &rArr; GLCD_GoToPage &rArr; glcd_CmdWrite &rArr; glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetUp
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Printf
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_InvertRect
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_GoToLine
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawRect
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawLine
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHoriLine
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawFillRect
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawFillCircle
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawCircle
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2f]"></a>glcd_SelectPage0</STRONG> (ARM, 56 bytes, Stack size 8 bytes, glcd.o(i.glcd_SelectPage0))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = glcd_SelectPage0 &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetCursor
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_GoToPage
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_GetXYData
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
</UL>

<P><STRONG><a name="[2e]"></a>glcd_SelectPage1</STRONG> (ARM, 56 bytes, Stack size 8 bytes, glcd.o(i.glcd_SelectPage1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = glcd_SelectPage1 &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetCursor
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_GoToPage
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_GetXYData
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
</UL>

<P><STRONG><a name="[39]"></a>glcd_SendData</STRONG> (ARM, 172 bytes, Stack size 8 bytes, glcd.o(i.glcd_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = glcd_SendData &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_DataWrite
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glcd_CmdWrite
</UL>

<P><STRONG><a name="[19]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[18]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[17]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1a]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[14]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
